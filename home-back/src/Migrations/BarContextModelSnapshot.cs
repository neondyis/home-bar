// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using src;

#nullable disable

namespace src.Migrations
{
    [DbContext(typeof(BarContext))]
    partial class BarContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("src.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("brand_name");

                    b.HasKey("BrandId");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("src.Models.Cocktail", b =>
                {
                    b.Property<int>("CocktailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cocktail_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CocktailId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cocktail_name");

                    b.Property<string>("Strength")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cocktail_strength");

                    b.HasKey("CocktailId");

                    b.ToTable("cocktails", (string)null);
                });

            modelBuilder.Entity("src.Models.Glass", b =>
                {
                    b.Property<int>("GlassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("glass_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlassId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("glass_name");

                    b.HasKey("GlassId");

                    b.ToTable("glasses", (string)null);
                });

            modelBuilder.Entity("src.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("liqueur_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("ingredient_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValue("Syrup")
                        .HasColumnName("ingredient_type");

                    b.HasKey("IngredientId");

                    b.HasIndex("BrandId");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Ingredient");
                });

            modelBuilder.Entity("src.Models.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("instruction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstructionId"));

                    b.Property<int>("CocktailId")
                        .HasColumnType("integer");

                    b.HasKey("InstructionId");

                    b.HasIndex("CocktailId");

                    b.ToTable("instructions", (string)null);
                });

            modelBuilder.Entity("src.Models.InstructionStep", b =>
                {
                    b.Property<int>("InstructionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("step_description");

                    b.Property<int>("InstructionStepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("step_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstructionStepId"));

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("step_number");

                    b.HasKey("InstructionId");

                    b.ToTable("instruction_steps", (string)null);
                });

            modelBuilder.Entity("src.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("instruction_id");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("MeasurementId");

                    b.ToTable("measurements", (string)null);
                });

            modelBuilder.Entity("src.Models.MeasurementType", b =>
                {
                    b.Property<int>("MeasurementTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("measurement_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeasurementTypeId"));

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_type_unit");

                    b.HasKey("MeasurementTypeId");

                    b.ToTable("measurement_types", (string)null);
                });

            modelBuilder.Entity("src.Models.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("recipe_ingredient_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeIngredientId"));

                    b.Property<int>("CocktailId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientId")
                        .HasColumnType("integer");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("integer");

                    b.HasKey("RecipeIngredientId");

                    b.HasIndex("CocktailId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("recipe_ingredients", (string)null);
                });

            modelBuilder.Entity("src.Models.Fruit", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Fruit");
                });

            modelBuilder.Entity("src.Models.Garnish", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Garnish");
                });

            modelBuilder.Entity("src.Models.Liqueur", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("liqueur_percentage");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Liqueur");
                });

            modelBuilder.Entity("src.Models.Liquor", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("liquor_percentage");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Liquor");
                });

            modelBuilder.Entity("src.Models.Mixer", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Mixer");
                });

            modelBuilder.Entity("src.Models.Syrup", b =>
                {
                    b.HasBaseType("src.Models.Ingredient");

                    b.ToTable("ingredients", (string)null);

                    b.HasDiscriminator().HasValue("Syrup");
                });

            modelBuilder.Entity("src.Models.Ingredient", b =>
                {
                    b.HasOne("src.Models.Brand", "Brand")
                        .WithMany("Ingredients")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("src.Models.Instruction", b =>
                {
                    b.HasOne("src.Models.Cocktail", "Cocktail")
                        .WithMany("Instructions")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cocktail");
                });

            modelBuilder.Entity("src.Models.InstructionStep", b =>
                {
                    b.HasOne("src.Models.Instruction", "Instruction")
                        .WithMany("Steps")
                        .HasForeignKey("InstructionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instruction");
                });

            modelBuilder.Entity("src.Models.Measurement", b =>
                {
                    b.HasOne("src.Models.MeasurementType", "Type")
                        .WithMany("Measurements")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("src.Models.RecipeIngredient", b =>
                {
                    b.HasOne("src.Models.Cocktail", "Cocktail")
                        .WithMany("Ingredients")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("src.Models.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("src.Models.Measurement", "Measurement")
                        .WithMany()
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cocktail");

                    b.Navigation("Ingredient");

                    b.Navigation("Measurement");
                });

            modelBuilder.Entity("src.Models.Brand", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("src.Models.Cocktail", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Instructions");
                });

            modelBuilder.Entity("src.Models.Instruction", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("src.Models.MeasurementType", b =>
                {
                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
